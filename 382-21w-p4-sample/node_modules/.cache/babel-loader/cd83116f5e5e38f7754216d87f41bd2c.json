{"ast":null,"code":"import _slicedToArray from \"/home/aymak91/CIT-382/382-21w-p4-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/aymak91/CIT-382/382-21w-p4-sample/src/Listing.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataEntry from './DataEntry.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Listing(props) {\n  _s();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        grade = _useState4[0],\n        setGrade = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        grad = _useState6[0],\n        setGrad = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        error = _useState8[0],\n        setError = _useState8[1];\n\n  const handleSaveClick = () => {\n    /*\r\n      On Save:\r\n    1. Validate data, show errors, no further action\r\n    2. Send data to App\r\n    3. Clear/reset form fields\r\n      */\n    // 1. Validate data, show errors, no further action\n    let isError = false; // Name: must have length > 0 after trim\n\n    isError = name.trim().length === 0; // Grade: try to cast to number, must be numeric, >= 0\n    // One-liner, but makes showing which error difficult\n    // isError = !isError ? isNaN(grade): isError;\n    // console.log('number?', typeof grade);  // Confirm input box returns string\n\n    const gradeTest = Number(String(grade).trim());\n\n    if (!isError) {\n      // TODO: Finish grade validation, allows non-numic\n      isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\n    } else {\n      setError('Invalid Entry');\n    } // Grad: no validation necessary\n    // Only finish steps #2 and #3 if no error\n\n\n    console.log('Error:', isError);\n\n    if (!isError) {\n      // 2. Send data to App\n      saveGrade({\n        name,\n        grade: gradeTest,\n        grad\n      }); // 3. Clear/reset form fields\n\n      setName('');\n      setGrade(0);\n      setGrad(false);\n      setError('');\n    }\n  };\n\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dataList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list\",\n      children: \"List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: \"ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: \"Grade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: \"Grad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), props.grades.map((entry, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: index\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"listElement\",\n          value: entry.name,\n          onChange: e => e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: entry.grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: entry.grad.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"listElement\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => props.handleDelete(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Listing, \"sF6AE+5EXGBw4Z42M7UOY4kJxLk=\");\n\n_c = Listing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Listing\");","map":{"version":3,"sources":["/home/aymak91/CIT-382/382-21w-p4-sample/src/Listing.js"],"names":["React","useState","DataEntry","Listing","props","name","setName","grade","setGrade","grad","setGrad","error","setError","handleSaveClick","isError","trim","length","gradeTest","Number","String","isNaN","console","log","saveGrade","grades","map","entry","index","e","toString","handleDelete","handleClear"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport DataEntry from './DataEntry.js';\r\n\r\nexport default function Listing(props) {\r\n    \r\n    const [name, setName] = useState('');\r\n    const [grade, setGrade] = useState(0);\r\n    const [grad, setGrad] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSaveClick = () => {\r\n        /*\r\n\r\n        On Save:\r\n        1. Validate data, show errors, no further action\r\n        2. Send data to App\r\n        3. Clear/reset form fields\r\n\r\n        */\r\n        // 1. Validate data, show errors, no further action\r\n        let isError = false;\r\n\r\n        // Name: must have length > 0 after trim\r\n        isError = name.trim().length === 0;\r\n\r\n        // Grade: try to cast to number, must be numeric, >= 0\r\n        // One-liner, but makes showing which error difficult\r\n        // isError = !isError ? isNaN(grade): isError;\r\n\r\n        // console.log('number?', typeof grade);  // Confirm input box returns string\r\n        const gradeTest = Number(String(grade).trim());\r\n\r\n        if (!isError) {\r\n        // TODO: Finish grade validation, allows non-numic\r\n        isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\r\n        } else {\r\n            setError('Invalid Entry')\r\n        }\r\n\r\n        // Grad: no validation necessary\r\n\r\n        // Only finish steps #2 and #3 if no error\r\n        console.log('Error:', isError);\r\n        if (!isError) {\r\n        // 2. Send data to App\r\n        saveGrade({ name, grade: gradeTest, grad });\r\n\r\n        // 3. Clear/reset form fields\r\n        setName('');\r\n        setGrade(0);\r\n        setGrad(false);\r\n        setError('');\r\n        }\r\n    };\r\n\r\n    console.log(props);\r\n    return (\r\n    <div className=\"dataList\">\r\n      <h2 className=\"list\">List</h2>\r\n        <ul className=\"table\">\r\n            <ul className=\"entry\">\r\n                <li className=\"listElement\">ID</li>\r\n                <li className=\"listElement\">Name</li>\r\n                <li className=\"listElement\">Grade</li>\r\n                <li className=\"listElement\">Grad</li>\r\n                <li className=\"listElement\">Delete</li>\r\n            </ul>\r\n            {props.grades.map((entry, index) => (\r\n                <ul className=\"entry\">                \r\n                    <li className=\"listElement\" key={index}>{index}</li>\r\n                    <input className=\"listElement\" value={entry.name} onChange={(e) => (e)}></input>\r\n                    <li className=\"listElement\">{entry.grade}</li>\r\n                    <li className=\"listElement\">{entry.grad.toString()}</li>\r\n                    <li className=\"listElement\">\r\n                        <button onClick={() => props.handleDelete(index)}>Delete</button>\r\n                    </li>\r\n                </ul>\r\n            ))}\r\n        </ul>\r\n        <button onClick={props.handleClear}>Clear</button>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}