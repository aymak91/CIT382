{"ast":null,"code":"import _slicedToArray from \"/home/aymak91/CIT-382/382-21w-p4-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/aymak91/CIT-382/382-21w-p4-sample/src/DataEntry.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataEntry({\n  saveGrade = f => f\n}) {\n  _s();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        grade = _useState4[0],\n        setGrade = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        grad = _useState6[0],\n        setGrad = _useState6[1];\n\n  const handleSaveClick = () => {\n    /*\r\n        On Save:\r\n      1. Validate data, show errors, no further action\r\n      2. Send data to App\r\n      3. Clear/reset form fields\r\n      */\n    // 1. Validate data, show errors, no further action\n    let isError = false; // Name: must have length > 0 after trim\n\n    isError = name.trim().length === 0; // Grade: try to cast to number, must be numeric, >= 0\n    // One-liner, but makes showing which error difficult\n    // isError = !isError ? isNaN(grade): isError;\n    // console.log('number?', typeof grade);  // Confirm input box returns string\n\n    const gradeTest = Number(String(grade).trim());\n\n    if (!isError) {\n      // TODO: Finish grade validation, allows non-numic\n      isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\n    } // Grad: no validation necessary\n    // Only finish steps #2 and #3 if no error\n\n\n    console.log('Error:', isError);\n\n    if (!isError) {\n      // 2. Send data to App\n      saveGrade({\n        name,\n        grade: gradeTest,\n        grad\n      }); // 3. Clear/reset form fields\n\n      setName('');\n      setGrade(0);\n      setGrad(false);\n    }\n  };\n\n  console.log('State:', name, grade, grad);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dataEntry\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"NameInput\",\n        children: \"Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"NameInput\",\n        value: name,\n        onChange: evt => setName(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"GradeInput\",\n        children: \"Grade: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GradeInput\",\n        value: grade,\n        onChange: evt => setGrade(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"GradCheckbox\",\n        children: \"Grad: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GradCheckbox\",\n        type: \"checkbox\",\n        checked: grad,\n        onChange: evt => setGrad(evt.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveClick,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataEntry, \"6pzVvN3oi+OZcOzXfQF6xyctpKA=\");\n\n_c = DataEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataEntry\");","map":{"version":3,"sources":["/home/aymak91/CIT-382/382-21w-p4-sample/src/DataEntry.js"],"names":["React","useState","DataEntry","saveGrade","f","name","setName","grade","setGrade","grad","setGrad","handleSaveClick","isError","trim","length","gradeTest","Number","String","isNaN","console","log","evt","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function DataEntry({ saveGrade = (f) => f }) {\r\n  const [name, setName] = useState('');\r\n  const [grade, setGrade] = useState(0);\r\n  const [grad, setGrad] = useState(false);\r\n  const handleSaveClick = () => {\r\n    /*\r\n\r\n      On Save:\r\n      1. Validate data, show errors, no further action\r\n      2. Send data to App\r\n      3. Clear/reset form fields\r\n\r\n    */\r\n    // 1. Validate data, show errors, no further action\r\n    let isError = false;\r\n\r\n    // Name: must have length > 0 after trim\r\n    isError = name.trim().length === 0;\r\n\r\n    // Grade: try to cast to number, must be numeric, >= 0\r\n    // One-liner, but makes showing which error difficult\r\n    // isError = !isError ? isNaN(grade): isError;\r\n\r\n    // console.log('number?', typeof grade);  // Confirm input box returns string\r\n    const gradeTest = Number(String(grade).trim());\r\n\r\n    if (!isError) {\r\n      // TODO: Finish grade validation, allows non-numic\r\n      isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\r\n    }\r\n\r\n    // Grad: no validation necessary\r\n\r\n    // Only finish steps #2 and #3 if no error\r\n    console.log('Error:', isError);\r\n    if (!isError) {\r\n      // 2. Send data to App\r\n      saveGrade({ name, grade: gradeTest, grad });\r\n\r\n      // 3. Clear/reset form fields\r\n      setName('');\r\n      setGrade(0);\r\n      setGrad(false);\r\n    }\r\n  };\r\n  console.log('State:', name, grade, grad);\r\n  return (\r\n    <div className=\"dataEntry\">\r\n      <h2>Data Entry</h2>\r\n      <div>\r\n        <label htmlFor=\"NameInput\">Name: </label>\r\n        <input\r\n          id=\"NameInput\"\r\n          value={name}\r\n          onChange={(evt) => setName(evt.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"GradeInput\">Grade: </label>\r\n        <input\r\n          id=\"GradeInput\"\r\n          value={grade}\r\n          onChange={(evt) => setGrade(evt.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"GradCheckbox\">Grad: </label>\r\n        <input\r\n          id=\"GradCheckbox\"\r\n          type=\"checkbox\"\r\n          checked={grad}\r\n          onChange={(evt) => setGrad(evt.target.checked)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button onClick={handleSaveClick}>Save</button>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}