{"ast":null,"code":"import _slicedToArray from \"/home/aymak91/CIT-382/382-21w-p4-sample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/aymak91/CIT-382/382-21w-p4-sample/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        grades = _useState2[0],\n        setGrades = _useState2[1];\n\n  const addGrade = props => {\n    console.log('** addGrade **');\n    const name = props.name,\n          grade = props.grade,\n          grad = props.grad; // Deconstruction\n\n    setGrades([{\n      name,\n      grade,\n      grad\n    }]); // If prop and variable have same name, just use prop name\n  };\n\n  console.log(grades);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Project 4 Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addGrade,\n        children: \"Add Grade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Listing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataEntry, {\n        saveGrade: addGrade\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Graphing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"os7L6whk3/PwvkvXCFfE+iPdVlQ=\");\n\n_c = App;\n\nfunction Listing(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dataList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Listing;\n\nfunction DataEntry({\n  saveGrade = f => f\n}) {\n  _s2();\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        grade = _useState6[0],\n        setGrade = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        grad = _useState8[0],\n        setGrad = _useState8[1];\n\n  const handleSaveClick = () => {\n    /*\n       On Save:\n      1. Validate data, show errors, no further action\n      2. Send data to App\n      3. Clear/reset form fields\n     */\n    // 1. Validate data, show errors, no further action\n    let isError = false; // Name: must have length > 0 after trim\n\n    isError = name.trim().length === 0; // Grade: try to cast to number, must be numeric, >= 0\n    // One-liner, but makes showing which error difficult\n    // isError = !isError ? isNaN(grade): isError;\n    // console.log('number?', typeof grade);  // Confirm input box returns string\n\n    const gradeTest = Number(String(grade).trim());\n\n    if (!isError) {\n      // TODO: Finish grade validation, allows non-numic\n      isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\n    } // Grad: no validation necessary\n    // Only finish steps #2 and #3 if no error\n\n\n    console.log('Error:', isError);\n\n    if (!isError) {\n      // 2. Send data to App\n      saveGrade({\n        name,\n        grade: gradeTest,\n        grad\n      }); // 3. Clear/reset form fields\n\n      setName('');\n      setGrade(0);\n      setGrad(false);\n    }\n  };\n\n  console.log('State:', name, grade, grad);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dataEntry\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"NameInput\",\n        children: \"Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"NameInput\",\n        value: name,\n        onChange: evt => setName(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"GradeInput\",\n        children: \"Grade: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GradeInput\",\n        value: grade,\n        onChange: evt => setGrade(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"GradCheckbox\",\n        children: \"Grad: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GradCheckbox\",\n        type: \"checkbox\",\n        checked: grad,\n        onChange: evt => setGrad(evt.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveClick,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(DataEntry, \"6pzVvN3oi+OZcOzXfQF6xyctpKA=\");\n\n_c3 = DataEntry;\n\nfunction Graphing(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Graphing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 10\n  }, this);\n}\n\n_c4 = Graphing;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Listing\");\n$RefreshReg$(_c3, \"DataEntry\");\n$RefreshReg$(_c4, \"Graphing\");","map":{"version":3,"sources":["/home/aymak91/CIT-382/382-21w-p4-sample/src/App.js"],"names":["React","useState","App","grades","setGrades","addGrade","props","console","log","name","grade","grad","Listing","DataEntry","saveGrade","f","setName","setGrade","setGrad","handleSaveClick","isError","trim","length","gradeTest","Number","String","isNaN","evt","target","value","checked","Graphing"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './styles.css';\n\nexport default function App() {\n  const [grades, setGrades] = useState([]);\n  const addGrade = (props) => {\n    console.log('** addGrade **');\n    const { name, grade, grad } = props; // Deconstruction\n    setGrades([{ name, grade, grad }]); // If prop and variable have same name, just use prop name\n  };\n  console.log(grades);\n  return (\n    <div className=\"App\">\n      <h1>Project 4 Sample</h1>\n      <div>\n        <button onClick={addGrade}>Add Grade</button>\n        <Listing />\n        <DataEntry saveGrade={addGrade} />\n        <Graphing />\n      </div>\n    </div>\n  );\n}\nfunction Listing(props) {\n  return (\n    <div className=\"dataList\">\n      <h2>List</h2>\n      <hr />\n      <hr />\n    </div>\n  );\n}\nfunction DataEntry({ saveGrade = (f) => f }) {\n  const [name, setName] = useState('');\n  const [grade, setGrade] = useState(0);\n  const [grad, setGrad] = useState(false);\n  const handleSaveClick = () => {\n    /*\n\n      On Save:\n      1. Validate data, show errors, no further action\n      2. Send data to App\n      3. Clear/reset form fields\n\n    */\n    // 1. Validate data, show errors, no further action\n    let isError = false;\n\n    // Name: must have length > 0 after trim\n    isError = name.trim().length === 0;\n\n    // Grade: try to cast to number, must be numeric, >= 0\n    // One-liner, but makes showing which error difficult\n    // isError = !isError ? isNaN(grade): isError;\n\n    // console.log('number?', typeof grade);  // Confirm input box returns string\n    const gradeTest = Number(String(grade).trim());\n\n    if (!isError) {\n      // TODO: Finish grade validation, allows non-numic\n      isError = isNaN(gradeTest) && gradeTest >= 0; // Conditionals short-circuit\n    }\n\n    // Grad: no validation necessary\n\n    // Only finish steps #2 and #3 if no error\n    console.log('Error:', isError);\n    if (!isError) {\n      // 2. Send data to App\n      saveGrade({ name, grade: gradeTest, grad });\n\n      // 3. Clear/reset form fields\n      setName('');\n      setGrade(0);\n      setGrad(false);\n    }\n  };\n  console.log('State:', name, grade, grad);\n  return (\n    <div className=\"dataEntry\">\n      <h2>Data Entry</h2>\n      <div>\n        <label htmlFor=\"NameInput\">Name: </label>\n        <input\n          id=\"NameInput\"\n          value={name}\n          onChange={(evt) => setName(evt.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"GradeInput\">Grade: </label>\n        <input\n          id=\"GradeInput\"\n          value={grade}\n          onChange={(evt) => setGrade(evt.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"GradCheckbox\">Grad: </label>\n        <input\n          id=\"GradCheckbox\"\n          type=\"checkbox\"\n          checked={grad}\n          onChange={(evt) => setGrad(evt.target.checked)}\n        />\n      </div>\n      <div>\n        <button onClick={handleSaveClick}>Save</button>\n      </div>\n      <hr />\n    </div>\n  );\n}\nfunction Graphing(props) {\n  return <div>Graphing</div>;\n}\n"]},"metadata":{},"sourceType":"module"}