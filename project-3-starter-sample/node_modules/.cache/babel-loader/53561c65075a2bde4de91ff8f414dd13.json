{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aymak91/CIT-382/project-3-starter-sample/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\"; // We are importing the caesarEncrypt function from our js file\n\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\n\nconst Cipher = props => {\n  let stuff = [...Array(126 + 1).keys()].filter(num => num >= 33 && num <= 126);\n  let _this$state = this.state,\n      clearText = _this$state.clearText,\n      value = _this$state.value,\n      shiftLeft = _this$state.shiftLeft;\n  let renderedOutput = stuff.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [String.fromCharCode(item), \"=\", caesarEncrypt(clearText, value, shiftLeft)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 42\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedOutput\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Cipher;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 2,\n      shiftLeft: false\n    };\n    console.log(this.state);\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleShift = this.handleShift.bind(this);\n  }\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n\n\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n    // getting the value from the input element\n    var clearText = e.target.value; // updating the state, so that it reflects in the UI\n\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n\n    let _this$state2 = this.state,\n        value = _this$state2.value,\n        shiftLeft = _this$state2.shiftLeft;\n    var encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    /**\n     * Update the state to have the encrypted text\n     */\n\n    this.setState({\n      encryptedText,\n      clearText\n    });\n    console.log(this.state);\n  }\n\n  handleOnChange(e) {\n    let value = e.target.value;\n    let _this$state3 = this.state,\n        shiftLeft = _this$state3.shiftLeft,\n        clearText = _this$state3.clearText;\n    let encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    this.setState({\n      encryptedText,\n      value\n    });\n  }\n\n  handleShift(e) {\n    let shiftLeft = !this.state.shiftLeft;\n    let _this$state4 = this.state,\n        value = _this$state4.value,\n        clearText = _this$state4.clearText;\n    let encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    this.setState({\n      encryptedText,\n      shiftLeft\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"clearText\",\n        children: \" Clear Text \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"clearText\",\n        id: \"clearText\",\n        onChange: this.textChangeHandler,\n        value: this.state.clearText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Caesar Ciphertext: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.encryptedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Number:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"number\",\n          type: \"range\",\n          min: \"0\",\n          max: \"26\",\n          value: this.state.value,\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"outnum\",\n          type: \"number\",\n          value: this.state.value,\n          min: \"0\",\n          max: \"26\",\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), \"ShiftLeft: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"shiftLeft\",\n          type: \"checkbox\",\n          value: this.state.shiftLeft,\n          onClick: this.handleShift\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Alphabet\",\n        children: /*#__PURE__*/_jsxDEV(Cipher, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Cipher\");","map":{"version":3,"sources":["/home/aymak91/CIT-382/project-3-starter-sample/src/App.js"],"names":["React","Component","caesarEncrypt","setConstantValue","Cipher","props","stuff","Array","keys","filter","num","state","clearText","value","shiftLeft","renderedOutput","map","item","String","fromCharCode","App","constructor","encryptedText","console","log","textChangeHandler","bind","handleOnChange","handleShift","e","target","setState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP,C,CACA;;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,MAAIC,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAC,MAAM,CAAP,CAAL,CAAeC,IAAf,EAAJ,EAA2BC,MAA3B,CAAmCC,GAAD,IAASA,GAAG,IAAI,EAAP,IAAaA,GAAG,IAAI,GAA/D,CAAZ;AADwB,oBAEY,KAAKC,KAFjB;AAAA,MAEnBC,SAFmB,eAEnBA,SAFmB;AAAA,MAERC,KAFQ,eAERA,KAFQ;AAAA,MAEDC,SAFC,eAEDA,SAFC;AAGxB,MAAIC,cAAc,GAAGT,KAAK,CAACU,GAAN,CAAUC,IAAI,iBAAI;AAAA,eAAMC,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAN,OAAkCf,aAAa,CAACU,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,UAAlB,CAArB;AACA,sBACE;AAAA,cACGC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CATD;;KAAMX,M;AAWN,eAAe,MAAMgB,GAAN,SAAkBnB,SAAlB,CAA4B;AACzCoB,EAAAA,WAAW,CAAChB,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXU,MAAAA,aAAa,EAAE,EAFJ;AAGXT,MAAAA,KAAK,EAAE,CAHI;AAIXC,MAAAA,SAAS,EAAE;AAJA,KAAb;AAOAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AAEA,SAAKc,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACD;AAED;AACF;AACA;AACA;;;AACED,EAAAA,iBAAiB,CAACI,CAAD,EAAI;AACnB;AACJ;AACA;AACA;AACA;AACA;AAEI;AACA,QAAIjB,SAAS,GAAGiB,CAAC,CAACC,MAAF,CAASjB,KAAzB,CATmB,CAUnB;;AACA;AACJ;AACA;AACA;AACA;;AAfuB,uBAiBM,KAAKF,KAjBX;AAAA,QAiBdE,KAjBc,gBAiBdA,KAjBc;AAAA,QAiBPC,SAjBO,gBAiBPA,SAjBO;AAmBnB,QAAIQ,aAAa,GAAGpB,aAAa,CAACU,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAAjC;AACA;AACJ;AACA;;AACI,SAAKiB,QAAL,CAAc;AAAET,MAAAA,aAAF;AAAiBV,MAAAA;AAAjB,KAAd;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACD;;AAEDgB,EAAAA,cAAc,CAACE,CAAD,EAAI;AAChB,QAAIhB,KAAK,GAAGgB,CAAC,CAACC,MAAF,CAASjB,KAArB;AADgB,uBAEa,KAAKF,KAFlB;AAAA,QAEXG,SAFW,gBAEXA,SAFW;AAAA,QAEAF,SAFA,gBAEAA,SAFA;AAGhB,QAAIU,aAAa,GAAGpB,aAAa,CAACU,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAAjC;AACA,SAAKiB,QAAL,CAAc;AAAET,MAAAA,aAAF;AAAiBT,MAAAA;AAAjB,KAAd;AACD;;AAEDe,EAAAA,WAAW,CAACC,CAAD,EAAI;AACb,QAAIf,SAAS,GAAG,CAAC,KAAKH,KAAL,CAAWG,SAA5B;AADa,uBAEY,KAAKH,KAFjB;AAAA,QAERE,KAFQ,gBAERA,KAFQ;AAAA,QAEDD,SAFC,gBAEDA,SAFC;AAGb,QAAIU,aAAa,GAAGpB,aAAa,CAACU,SAAD,EAAYC,KAAZ,EAAmBC,SAAnB,CAAjC;AACA,SAAKiB,QAAL,CAAc;AAAET,MAAAA,aAAF;AAAiBR,MAAAA;AAAjB,KAAd;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,wBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,EAAE,EAAC,WAHL;AAIE,QAAA,QAAQ,EAAE,KAAKP,iBAJjB;AAKE,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWC;AALpB;AAAA;AAAA;AAAA;AAAA,cAPF,eAcE;AAAA;AAAA;AAAA;AAAA,cAdF,eAeE;AAAA;AAAA;AAAA;AAAA,cAfF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF,eAkBE;AAAA,kBAAI,KAAKD,KAAL,CAAWW;AAAf;AAAA;AAAA;AAAA;AAAA,cAlBF,eAoBE;AAAA,8BACU,GADV,eAEE;AAAO,UAAA,EAAE,EAAC,QAAV;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,GAAG,EAAC,GAApC;AAAwC,UAAA,GAAG,EAAC,IAA5C;AAAiD,UAAA,KAAK,EAAE,KAAKX,KAAL,CAAWE,KAAnE;AAA0E,UAAA,QAAQ,EAAE,KAAKc;AAAzF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,EAAE,EAAC,QAAV;AAAmB,UAAA,IAAI,EAAC,QAAxB;AAAiC,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWE,KAAnD;AAA0D,UAAA,GAAG,EAAC,GAA9D;AAAkE,UAAA,GAAG,EAAC,IAAtE;AAA2E,UAAA,QAAQ,EAAE,KAAKc;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAHF,8BAIa;AAAO,UAAA,EAAE,EAAC,WAAV;AAAsB,UAAA,IAAI,EAAC,UAA3B;AAAsC,UAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWG,SAAxD;AAAmE,UAAA,OAAO,EAAE,KAAKc;AAAjF;AAAA;AAAA;AAAA;AAAA,gBAJb;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF,eA0BE;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA,+BAEE,QAAE,MAAF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cA1BF,eA8BE;AAAA;AAAA;AAAA;AAAA,cA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAqCD;;AApGwC","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles.css\";\n// We are importing the caesarEncrypt function from our js file\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\n\nconst Cipher = (props) => {\n  let stuff = [...Array(126 + 1).keys()].filter((num) => num >= 33 && num <= 126);\n  let {clearText, value, shiftLeft} = this.state;\n  let renderedOutput = stuff.map(item => <div>{String.fromCharCode(item)}={caesarEncrypt(clearText, value, shiftLeft)}</div>)\n  return (\n    <div>\n      {renderedOutput}\n    </div>\n  )\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 2,\n      shiftLeft: false\n    };\n\n    console.log(this.state);\n\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleShift = this.handleShift.bind(this);\n  }\n\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n\n    // getting the value from the input element\n    var clearText = e.target.value;\n    // updating the state, so that it reflects in the UI\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n\n    let {value, shiftLeft} = this.state;\n\n    var encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    /**\n     * Update the state to have the encrypted text\n     */\n    this.setState({ encryptedText, clearText });\n    console.log(this.state);\n  }\n\n  handleOnChange(e) {\n    let value = e.target.value;\n    let {shiftLeft, clearText} = this.state;\n    let encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    this.setState({ encryptedText, value });\n  }\n\n  handleShift(e) {\n    let shiftLeft = !this.state.shiftLeft;    \n    let {value, clearText} = this.state;\n    let encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    this.setState({ encryptedText, shiftLeft });\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <label htmlFor=\"clearText\"> Clear Text </label>\n        {/*\n         * Tied input element to a state variable\n         * Added change handler to update the value\n         * Will call encrypt function inside the change handler\n         */}\n        <input\n          type=\"text\"\n          name=\"clearText\"\n          id=\"clearText\"\n          onChange={this.textChangeHandler}\n          value={this.state.clearText}\n        />\n        <br />\n        <br />\n        <p>Caesar Ciphertext: </p>\n        {/* Showing the result here */}\n        <p>{this.state.encryptedText}</p>\n\n        <div>\n          Number:{\" \"}\n          <input id=\"number\" type=\"range\" min=\"0\" max=\"26\" value={this.state.value} onChange={this.handleOnChange}></input>\n          <input id=\"outnum\" type=\"number\" value={this.state.value} min=\"0\" max=\"26\" onChange={this.handleOnChange}></input>\n          ShiftLeft: <input id=\"shiftLeft\" type=\"checkbox\" value={this.state.shiftLeft} onClick={this.handleShift}></input>\n        </div>\n        <div id=\"Alphabet\">\n          {/* div placeholder for alphanumeric display */}\n          < Cipher />\n        </div>\n        <br />\n      </div>\n\n\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}