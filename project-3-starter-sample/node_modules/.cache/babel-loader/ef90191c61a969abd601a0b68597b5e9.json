{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aymak91/CIT-382/project-3-starter-sample/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\"; // We are importing the caesarEncrypt function from our js file\n\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n      textChangeHandler();\n    };\n\n    this.handleShift = e => {\n      this.setState({\n        shiftLeft: !this.state.shiftLeft\n      });\n      textChangeHandler();\n    };\n\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 0,\n      shiftLeft: false\n    };\n    console.log(this.state);\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleShift = this.handleShift.bind(this);\n  }\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n\n\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n    // getting the value from the input element\n    var clearText = e.target.value; // updating the state, so that it reflects in the UI\n\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n\n    let _this$state = this.state,\n        value = _this$state.value,\n        shiftLeft = _this$state.shiftLeft;\n    var encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    /**\n     * Update the state to have the encrypted text\n     */\n\n    this.setState({\n      encryptedText,\n      clearText\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"clearText\",\n        children: \" Clear Text \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"clearText\",\n        id: \"clearText\",\n        onChange: this.textChangeHandler.bind(this),\n        value: this.state.clearText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Caesar Ciphertext: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.encryptedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Number:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"number\",\n          type: \"range\",\n          min: \"0\",\n          max: \"26\",\n          value: this.state.value,\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"outnum\",\n          type: \"number\",\n          value: this.state.value,\n          min: \"0\",\n          max: \"26\",\n          onChange: this.handleOnChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), \"ShiftLeft: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"shiftLeft\",\n          type: \"checkbox\",\n          value: this.state.shiftLeft,\n          onClick: this.handleShift.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Alphabet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/aymak91/CIT-382/project-3-starter-sample/src/App.js"],"names":["React","Component","caesarEncrypt","setConstantValue","App","constructor","props","handleOnChange","e","setState","value","target","textChangeHandler","handleShift","shiftLeft","state","clearText","encryptedText","console","log","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles.css\";\n// We are importing the caesarEncrypt function from our js file\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 0,\n      shiftLeft: false\n    };\n\n    console.log(this.state);\n\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleShift = this.handleShift.bind(this);\n  }\n\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n\n    // getting the value from the input element\n    var clearText = e.target.value;\n    // updating the state, so that it reflects in the UI\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n\n    let {value, shiftLeft} = this.state;\n\n    var encryptedText = caesarEncrypt(clearText, value, shiftLeft);\n    /**\n     * Update the state to have the encrypted text\n     */\n    this.setState({ encryptedText, clearText });\n    console.log(this.state);\n  }\n\n  handleOnChange = (e) => {\n    this.setState({value: e.target.value})\n    textChangeHandler();\n  }\n\n  handleShift = (e) => {\n    this.setState({shiftLeft: !this.state.shiftLeft})\n    textChangeHandler();\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <label htmlFor=\"clearText\"> Clear Text </label>\n        {/*\n         * Tied input element to a state variable\n         * Added change handler to update the value\n         * Will call encrypt function inside the change handler\n         */}\n        <input\n          type=\"text\"\n          name=\"clearText\"\n          id=\"clearText\"\n          onChange={this.textChangeHandler.bind(this)}\n          value={this.state.clearText}\n        />\n        <br />\n        <br />\n        <p>Caesar Ciphertext: </p>\n        {/* Showing the result here */}\n        <p>{this.state.encryptedText}</p>\n\n        <div>\n          Number:{\" \"}\n          <input id=\"number\" type=\"range\" min=\"0\" max=\"26\" value={this.state.value} onChange={this.handleOnChange}></input>\n          <input id=\"outnum\" type=\"number\" value={this.state.value} min=\"0\" max=\"26\" onChange={this.handleOnChange.bind(this)}></input>\n          ShiftLeft: <input id=\"shiftLeft\" type=\"checkbox\" value={this.state.shiftLeft} onClick={this.handleShift.bind(this)}></input>\n        </div>\n        <div id=\"Alphabet\">\n          {/* div placeholder for alphanumeric display */}\n        </div>\n        <br />\n      </div>\n\n\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}