{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aymak91/CIT-382/project-3-starter-sample/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\"; // We are importing the caesarEncrypt function from our js file\n\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = e => this.setState({\n      value: e.target.value\n    });\n\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 0\n    };\n  }\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n\n\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n    // getting the value from the input element\n    var clearText = e.target.value; // updating the state, so that it reflects in the UI\n\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n\n    var encryptedText = caesarEncrypt(clearText, 2, true);\n    /**\n     * Update the state to have the encrypted text\n     */\n\n    this.setState({\n      encryptedText,\n      clearText\n    });\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div className=\"app\">\n      //   <div>\n      //     ClearText: <input type=\"text\" id=\"clearText\"></input>\n      //   </div>\n      //   <div>\n      //     Caesar CipherText: <span id=\"clearTextOutput\"></span>\n      //   </div>\n      //   <div>\n      //     Number:{\" \"}\n      //     <input id=\"number\" type=\"range\" min=\"0\" max=\"26\" value=\"0\"></input>\n      //     <input id=\"outnum\" type=\"number\" value=\"0\" min=\"0\" max=\"26\"></input>\n      //     ShiftLeft: <input id=\"shiftLeft\" type=\"checkbox\"></input>\n      //   </div>\n      //   <div id=\"Alphabet\">\n      //     <p>{this.state.encryptedText}</p>\n      //   </div>\n      // </div>\n      _jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"clearText\",\n          children: \" Clear Text \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"clearText\",\n          id: \"clearText\",\n          onChange: this.textChangeHandler.bind(this),\n          value: this.state.clearText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Caesar Ciphertext: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.encryptedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Number:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"number\",\n            type: \"range\",\n            min: \"0\",\n            max: \"26\",\n            value: this.state.value,\n            onChange: this.handleOnChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"outnum\",\n            type: \"number\",\n            value: this.state.value,\n            min: \"0\",\n            max: \"26\",\n            onChange: this.handleOnChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), \"ShiftLeft: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"shiftLeft\",\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"Alphabet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} // <div className=\"App\">\n//   <label for=\"clearText\"> Clear Text </label>\n//   {/*\n//    * Tied input element to a state variable\n//    * Added change handler to update the value\n//    * Will call encrypt function inside the change handler\n//    */}\n//   <input\n//     type=\"text\"\n//     name=\"clearText\"\n//     id=\"clearText\"\n//     onChange={this.textChangeHandler.bind(this)}\n//     value={this.state.clearText}\n//   />\n//   <br />\n//   <br />\n//   <p>Caesar Ciphertext:</p>\n//   {/* Showing the result here */}\n//   <p>{this.state.encryptedText}</p>\n//   <br />\n// </div>","map":{"version":3,"sources":["/home/aymak91/CIT-382/project-3-starter-sample/src/App.js"],"names":["React","Component","caesarEncrypt","setConstantValue","App","constructor","props","handleOnChange","e","setState","value","target","state","clearText","encryptedText","textChangeHandler","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles.css\";\n// We are importing the caesarEncrypt function from our js file\nimport { caesarEncrypt } from \"./Project1\";\nimport { setConstantValue } from \"typescript\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clearText: \"\",\n      encryptedText: \"\",\n      value: 0\n    };\n  }\n\n  /*\n   * This function handles the change event for the text box.\n   * You need to add handlers for the other input elements\n   */\n  textChangeHandler(e) {\n    /*\n     * You have to call the caesarEncrypt function with values\n     * from the input elements. Right now I am only using the text\n     * input element, but you have to tie up the shift num and\n     * shift left checkbox yourself\n     */\n\n    // getting the value from the input element\n    var clearText = e.target.value;\n    // updating the state, so that it reflects in the UI\n    /*\n     * calliing the caesarEncrypt function with the text the user entered\n     * You have to get the values of the other inputs\n     * HINT: Store other input in state and use them\n     */\n    var encryptedText = caesarEncrypt(clearText, 2, true);\n    /**\n     * Update the state to have the encrypted text\n     */\n    this.setState({ encryptedText, clearText });\n  }\n\n  handleOnChange = (e) => this.setState({value: e.target.value})\n\n  render() {\n    return (\n      // <div className=\"app\">\n      //   <div>\n      //     ClearText: <input type=\"text\" id=\"clearText\"></input>\n      //   </div>\n      //   <div>\n      //     Caesar CipherText: <span id=\"clearTextOutput\"></span>\n      //   </div>\n      //   <div>\n      //     Number:{\" \"}\n      //     <input id=\"number\" type=\"range\" min=\"0\" max=\"26\" value=\"0\"></input>\n      //     <input id=\"outnum\" type=\"number\" value=\"0\" min=\"0\" max=\"26\"></input>\n      //     ShiftLeft: <input id=\"shiftLeft\" type=\"checkbox\"></input>\n      //   </div>\n      //   <div id=\"Alphabet\">\n      //     <p>{this.state.encryptedText}</p>\n      //   </div>\n      // </div>\n\n      <div className=\"App\">\n        <label for=\"clearText\"> Clear Text </label>\n        {/*\n         * Tied input element to a state variable\n         * Added change handler to update the value\n         * Will call encrypt function inside the change handler\n         */}\n        <input\n          type=\"text\"\n          name=\"clearText\"\n          id=\"clearText\"\n          onChange={this.textChangeHandler.bind(this)}\n          value={this.state.clearText}\n        />\n        <br />\n        <br />\n        <p>Caesar Ciphertext: </p>\n        {/* Showing the result here */}\n        <p>{this.state.encryptedText}</p>\n\n        <div>\n          Number:{\" \"}\n          <input id=\"number\" type=\"range\" min=\"0\" max=\"26\" value={this.state.value} onChange={this.handleOnChange}></input>\n          <input id=\"outnum\" type=\"number\" value={this.state.value} min=\"0\" max=\"26\" onChange={this.handleOnChange}></input>\n          ShiftLeft: <input id=\"shiftLeft\" type=\"checkbox\"></input>\n        </div>\n        <div id=\"Alphabet\">\n          {/* div placeholder for alphanumeric display */}\n        </div>\n        <br />\n      </div>\n\n\n    );\n  }\n}\n\n\n      // <div className=\"App\">\n      //   <label for=\"clearText\"> Clear Text </label>\n      //   {/*\n      //    * Tied input element to a state variable\n      //    * Added change handler to update the value\n      //    * Will call encrypt function inside the change handler\n      //    */}\n      //   <input\n      //     type=\"text\"\n      //     name=\"clearText\"\n      //     id=\"clearText\"\n      //     onChange={this.textChangeHandler.bind(this)}\n      //     value={this.state.clearText}\n      //   />\n      //   <br />\n      //   <br />\n      //   <p>Caesar Ciphertext:</p>\n      //   {/* Showing the result here */}\n      //   <p>{this.state.encryptedText}</p>\n      //   <br />\n      // </div>"]},"metadata":{},"sourceType":"module"}