{"ast":null,"code":"/**\r\n *\r\n * Get the contents for this file from Assignment 1\r\n * You dont have to add new logic\r\n *\r\n * We dont want any DOM manipulation here, because we\r\n * are using ReactJS now, so remove any document.getElementById\r\n * or any other DOM related code.\r\n *\r\n * Modify your previous functions so that they return\r\n * string(or any other data type) values so that we\r\n * can then use them in our components\r\n *\r\n * You have to export the function so that you can\r\n * import it in app.js\r\n * */\nexport function caesarEncrypt(clearText, shift, shiftLeft) {\n  const charMax = 90;\n  const charMin = 65;\n  const numMax = 57;\n  const numMin = 48;\n  const rangeMin = 0;\n  const rangeMax = 9;\n  let encryptedText = \"\";\n  clearText = clearText.toUpperCase();\n  let charDiff = charMax - charMin + 1;\n  let numDiff = numMax - numMin + 1;\n\n  for (let i = 0; i < clearText.length; i++) {\n    let asciiCode = clearText.charCodeAt(i);\n\n    if (asciiCode >= numMin && asciiCode <= numMax) {\n      // Whole numbers\n      if (shiftLeft) {\n        // Shift left\n        encryptedText += String.fromCharCode(asciiCode - shift + numDiff <= numMax ? asciiCode - shift + numDiff : asciiCode - shift);\n      } else {\n        // Shift right\n        encryptedText += String.fromCharCode(asciiCode + shift - numDiff > numMax ? asciiCode - shift + numDiff : asciiCode + shift);\n      }\n    } else if (asciiCode >= charMin && asciiCode <= charMax) {\n      // Uppercase characters\n      if (shiftLeft) {\n        // Shift left\n        encryptedText += String.fromCharCode(asciiCode - shift + charDiff <= charMax ? asciiCode - shift + charDiff : asciiCode - shift);\n      } else {\n        // Shift right\n        encryptedText += String.fromCharCode(asciiCode + shift - charDiff > charMax ? asciiCode - shift + charDiff : asciiCode + shift);\n      }\n    } else {\n      encryptedText += clearText.charAt(i);\n    }\n  }\n\n  return encryptedText;\n}","map":{"version":3,"sources":["/home/aymak91/CIT-382/project-3-starter-sample/src/Project1.js"],"names":["caesarEncrypt","clearText","shift","shiftLeft","charMax","charMin","numMax","numMin","rangeMin","rangeMax","encryptedText","toUpperCase","charDiff","numDiff","i","length","asciiCode","charCodeAt","String","fromCharCode","charAt"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,SAAzC,EAAoD;AAEzD,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,QAAQ,GAAG,CAAjB;AAEE,MAAIC,aAAa,GAAG,EAApB;AACAT,EAAAA,SAAS,GAAGA,SAAS,CAACU,WAAV,EAAZ;AACA,MAAIC,QAAQ,GAAGR,OAAO,GAAGC,OAAV,GAAoB,CAAnC;AACA,MAAIQ,OAAO,GAAGP,MAAM,GAAGC,MAAT,GAAkB,CAAhC;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,SAAS,CAACc,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,SAAS,GAAGf,SAAS,CAACgB,UAAV,CAAqBH,CAArB,CAAhB;;AACA,QAAIE,SAAS,IAAIT,MAAb,IAAuBS,SAAS,IAAIV,MAAxC,EAAgD;AAC5C;AACA,UAAIH,SAAJ,EAAe;AACX;AACAO,QAAAA,aAAa,IAAIQ,MAAM,CAACC,YAAP,CAAoBH,SAAS,GAAGd,KAAZ,GAAoBW,OAApB,IAA+BP,MAA/B,GAAwCU,SAAS,GAAGd,KAAZ,GAAoBW,OAA5D,GAAsEG,SAAS,GAAGd,KAAtG,CAAjB;AACH,OAHD,MAGO;AACH;AACAQ,QAAAA,aAAa,IAAIQ,MAAM,CAACC,YAAP,CAAoBH,SAAS,GAAGd,KAAZ,GAAoBW,OAApB,GAA8BP,MAA9B,GAAuCU,SAAS,GAAGd,KAAZ,GAAoBW,OAA3D,GAAqEG,SAAS,GAAGd,KAArG,CAAjB;AACH;AACJ,KATD,MASO,IAAIc,SAAS,IAAIX,OAAb,IAAwBW,SAAS,IAAIZ,OAAzC,EAAkD;AACrD;AACA,UAAID,SAAJ,EAAe;AACX;AACAO,QAAAA,aAAa,IAAIQ,MAAM,CAACC,YAAP,CAAoBH,SAAS,GAAGd,KAAZ,GAAoBU,QAApB,IAAgCR,OAAhC,GAA0CY,SAAS,GAAGd,KAAZ,GAAoBU,QAA9D,GAAyEI,SAAS,GAAGd,KAAzG,CAAjB;AACH,OAHD,MAGO;AACH;AACAQ,QAAAA,aAAa,IAAIQ,MAAM,CAACC,YAAP,CAAoBH,SAAS,GAAGd,KAAZ,GAAoBU,QAApB,GAA+BR,OAA/B,GAAyCY,SAAS,GAAGd,KAAZ,GAAoBU,QAA7D,GAAwEI,SAAS,GAAGd,KAAxG,CAAjB;AACH;AACJ,KATM,MASA;AACHQ,MAAAA,aAAa,IAAIT,SAAS,CAACmB,MAAV,CAAiBN,CAAjB,CAAjB;AACH;AACJ;;AACD,SAAOJ,aAAP;AAEH","sourcesContent":["/**\r\n *\r\n * Get the contents for this file from Assignment 1\r\n * You dont have to add new logic\r\n *\r\n * We dont want any DOM manipulation here, because we\r\n * are using ReactJS now, so remove any document.getElementById\r\n * or any other DOM related code.\r\n *\r\n * Modify your previous functions so that they return\r\n * string(or any other data type) values so that we\r\n * can then use them in our components\r\n *\r\n * You have to export the function so that you can\r\n * import it in app.js\r\n * */\r\nexport function caesarEncrypt(clearText, shift, shiftLeft) {\r\n\r\n  const charMax = 90;\r\n  const charMin = 65\r\n  const numMax = 57;\r\n  const numMin = 48;\r\n  const rangeMin = 0;\r\n  const rangeMax = 9;\r\n\r\n    let encryptedText = \"\";\r\n    clearText = clearText.toUpperCase();\r\n    let charDiff = charMax - charMin + 1;\r\n    let numDiff = numMax - numMin + 1;\r\n    for (let i = 0; i < clearText.length; i++) {\r\n        let asciiCode = clearText.charCodeAt(i);\r\n        if (asciiCode >= numMin && asciiCode <= numMax) {\r\n            // Whole numbers\r\n            if (shiftLeft) {\r\n                // Shift left\r\n                encryptedText += String.fromCharCode(asciiCode - shift + numDiff <= numMax ? asciiCode - shift + numDiff : asciiCode - shift);\r\n            } else {\r\n                // Shift right\r\n                encryptedText += String.fromCharCode(asciiCode + shift - numDiff > numMax ? asciiCode - shift + numDiff : asciiCode + shift);\r\n            }\r\n        } else if (asciiCode >= charMin && asciiCode <= charMax) {\r\n            // Uppercase characters\r\n            if (shiftLeft) {\r\n                // Shift left\r\n                encryptedText += String.fromCharCode(asciiCode - shift + charDiff <= charMax ? asciiCode - shift + charDiff : asciiCode - shift);\r\n            } else {\r\n                // Shift right\r\n                encryptedText += String.fromCharCode(asciiCode + shift - charDiff > charMax ? asciiCode - shift + charDiff : asciiCode + shift);\r\n            }\r\n        } else {\r\n            encryptedText += clearText.charAt(i);\r\n        }\r\n    }\r\n    return encryptedText;\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}