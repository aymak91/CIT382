{"ast":null,"code":"/**\r\n *\r\n * Get the contents for this file from Assignment 1\r\n * You dont have to add new logic\r\n *\r\n * We dont want any DOM manipulation here, because we\r\n * are using ReactJS now, so remove any document.getElementById\r\n * or any other DOM related code.\r\n *\r\n * Modify your previous functions so that they return\r\n * string(or any other data type) values so that we\r\n * can then use them in our components\r\n *\r\n * You have to export the function so that you can\r\n * import it in app.js\r\n * */\nconst minASCIIDecimal = 33;\nconst maxASCIIDecimal = 126;\nconst charMaxUpper = 90;\nconst charMinUpper = 65;\nconst charMaxLower = 122;\nconst charMinLower = 97;\nconst numMax = 57;\nconst numMin = 48;\nconst rangeMin = 0;\nconst rangeMax = 9;\nconst defaultNumShift = 2;\nconst minNumShift = 0;\nconst maxNumShift = 26;\nexport function caesarEncrypt(clearText, shiftNum, shiftLeft) {\n  let encryptedText = \"\"; //clearText = clearText.toUpperCase();\n\n  let numDiff = numMax - numMin + 1;\n\n  for (let i = 0; i < clearText.length; i++) {\n    let asciiCode = clearText.charCodeAt(i);\n\n    if (asciiCode >= numMin && asciiCode <= numMax) {\n      // Whole numbers\n      if (shiftLeft) {\n        // Shift left\n        encryptedText += String.fromCharCode(asciiCode - shiftNum + numDiff <= numMax ? asciiCode - shiftNum + numDiff : asciiCode - shiftNum);\n      } else {\n        // Shift right\n        encryptedText += String.fromCharCode(asciiCode + shiftNum - numDiff > numMax ? asciiCode - shiftNum + numDiff : asciiCode + shiftNum);\n      }\n    } else if (asciiCode >= charMinUpper && asciiCode <= charMaxUpper) {\n      // Uppercase characters\n      let charDiff = charMaxUpper - charMinUpper + 1;\n\n      if (shiftLeft) {\n        // Shift left\n        encryptedText += String.fromCharCode(asciiCode - shiftNum + charDiff <= charMaxUpper ? asciiCode - shiftNum + charDiff : asciiCode - shiftNum);\n      } else {\n        // Shift right\n        encryptedText += String.fromCharCode(asciiCode + shiftNum - charDiff > charMaxUpper ? asciiCode - shiftNum + charDiff : asciiCode + shiftNum);\n      }\n    } else if (asciiCode >= charMinLower && asciiCode <= charMaxLower) {\n      // Lowercase characters\n      let charDiff = charMaxLower - charMinLower + 1;\n\n      if (shiftLeft) {\n        // Shift left\n        encryptedText += String.fromCharCode(asciiCode - shiftNum + charDiff <= charMaxLower ? asciiCode - shiftNum + charDiff : asciiCode - shiftNum);\n      } else {\n        // Shift right\n        encryptedText += String.fromCharCode(asciiCode + shiftNum - charDiff > charMaxLower ? asciiCode - shiftNum + charDiff : asciiCode + shiftNum);\n      }\n    } else {\n      encryptedText += clearText.charAt(i);\n    }\n  }\n\n  return encryptedText;\n}","map":{"version":3,"sources":["/home/aymak91/CIT-382/project-3-starter-sample/src/Project1.js"],"names":["minASCIIDecimal","maxASCIIDecimal","charMaxUpper","charMinUpper","charMaxLower","charMinLower","numMax","numMin","rangeMin","rangeMax","defaultNumShift","minNumShift","maxNumShift","caesarEncrypt","clearText","shiftNum","shiftLeft","encryptedText","numDiff","i","length","asciiCode","charCodeAt","String","fromCharCode","charDiff","charAt"],"mappings":"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","sourcesContent":["/**\r\n *\r\n * Get the contents for this file from Assignment 1\r\n * You dont have to add new logic\r\n *\r\n * We dont want any DOM manipulation here, because we\r\n * are using ReactJS now, so remove any document.getElementById\r\n * or any other DOM related code.\r\n *\r\n * Modify your previous functions so that they return\r\n * string(or any other data type) values so that we\r\n * can then use them in our components\r\n *\r\n * You have to export the function so that you can\r\n * import it in app.js\r\n * */\r\nconst minASCIIDecimal = 33;\r\nconst maxASCIIDecimal = 126;\r\nconst charMaxUpper = 90;\r\nconst charMinUpper = 65;\r\nconst charMaxLower = 122;\r\nconst charMinLower = 97;\r\nconst numMax = 57;\r\nconst numMin = 48;\r\nconst rangeMin = 0;\r\nconst rangeMax = 9;\r\nconst defaultNumShift = 2;\r\nconst minNumShift = 0;\r\nconst maxNumShift = 26;\r\n\r\nexport function caesarEncrypt(clearText, shiftNum, shiftLeft) {\r\n\r\n   let encryptedText = \"\";\r\n  //clearText = clearText.toUpperCase();\r\n  let numDiff = numMax - numMin + 1;\r\n  for (let i = 0; i < clearText.length; i++) {\r\n    let asciiCode = clearText.charCodeAt(i);\r\n    if (asciiCode >= numMin && asciiCode <= numMax) {\r\n      // Whole numbers\r\n      if (shiftLeft) {\r\n        // Shift left\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode - shiftNum + numDiff <= numMax\r\n            ? asciiCode - shiftNum + numDiff\r\n            : asciiCode - shiftNum\r\n        );\r\n      } else {\r\n        // Shift right\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode + shiftNum - numDiff > numMax\r\n            ? asciiCode - shiftNum + numDiff\r\n            : asciiCode + shiftNum\r\n        );\r\n      }\r\n    } else if (asciiCode >= charMinUpper && asciiCode <= charMaxUpper) {\r\n      // Uppercase characters\r\n      let charDiff = charMaxUpper - charMinUpper + 1;\r\n      if (shiftLeft) {\r\n        // Shift left\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode - shiftNum + charDiff <= charMaxUpper\r\n            ? asciiCode - shiftNum + charDiff\r\n            : asciiCode - shiftNum\r\n        );\r\n      } else {\r\n        // Shift right\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode + shiftNum - charDiff > charMaxUpper\r\n            ? asciiCode - shiftNum + charDiff\r\n            : asciiCode + shiftNum\r\n        );\r\n      }\r\n    } else if (asciiCode >= charMinLower && asciiCode <= charMaxLower) {\r\n      // Lowercase characters\r\n      let charDiff = charMaxLower - charMinLower + 1;\r\n      if (shiftLeft) {\r\n        // Shift left\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode - shiftNum + charDiff <= charMaxLower\r\n            ? asciiCode - shiftNum + charDiff\r\n            : asciiCode - shiftNum\r\n        );\r\n      } else {\r\n        // Shift right\r\n        encryptedText += String.fromCharCode(\r\n          asciiCode + shiftNum - charDiff > charMaxLower\r\n            ? asciiCode - shiftNum + charDiff\r\n            : asciiCode + shiftNum\r\n        );\r\n      }\r\n    } else {\r\n      encryptedText += clearText.charAt(i);\r\n    }\r\n  }\r\n  return encryptedText;\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}